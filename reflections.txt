In the fisrt excercise I learnt how to use the diff command first to compare two files. The synatx is:
diff -u first_file second_file

Now I created a version-control folder on the desktop and I used basic linux commands to create this reflextions.txt file and I am now blabbering!

The command git log will tell about the history of commits and the message and also the author with the timing of change!
The command git diff commitID1 commitID2 will tell us the difference between the two commits and the changes. Its output is similar to that of diff command in case of unix files. One point to note is the order of the arguments: commitID1 is for the old file and commitID2 is for the new file. 
The command git log --stat is used to understand the statistics related to the changes in the multiple files (Repository). 
The command git clone url is used to clone the repository of the url and save it on the local computer.
The command git config --global color.ui auto is used to ensure the coloring of the output when we try to determine the difference between git commits.
To make a folder a repository we use navigate to the folder and run the command git init
To view the status of the folder and whether there is something left to commit, we use the command git status. This will show the lift of changes and whether we have committed them or not.
The files are added to the staging area before being committed. This is done using the git add filename command.  
We can makes changes to the files of the working directory and then save them. One point to noe is that the changes will not be made to the staging area unless we explicitly add the files. This is an advantage becuase we can use this distinction between the staging area and the working directory to comapre the files present in the staging area and the working directory. This is done to realise the list of changes we have made in our working directory. This comparision is done using the command git diff. This command takes no arguments.
In the same way as above, if we want to compare the files present in the staging area with the files in the commited area to double check things, we do them by using the command git diff --staged
In case after performing many changes, we want to reset our files to earlier states without any edits, we can do that using the command 
git reset --hard. One point to note is that this command will restore the staging area and the working area to its initial states and this is not undoable. 
I made this edit to check out different versions of git diff.
Now lets start with branching. The command to checkout the existing number of branches and the current branch is : git branch. The branch currently being used will be highlighted.
The command to create a new branch is git branch branchname. This just creats the branch. So, to go to the created branch we use the checkout comman i.e git checkout branchname. Then if we use git branch, we can see that the branch that we are using will be branch we checked out.
One way to create a branch and check it out immediately is using the command: git branch -b branch_name which is the combination of the previos two commands.

Multiple branches can be merged using the git merge branchname1 branchname2. This command will make the branchname1 as the master i.e it will move one step forward. After merging if try to look at the git log, we can see the combination of logs from both branches in a chronological order on the basis of time. In case of the merged branches, the comparision of a particular commit must be made with its parent to really understand the differences in the files and the code added. This is done using the git show commitID command, this will compare the commit with the commitID automatically with its parent. We can delete the label associated with a branch by using the git branch -d branchname command. This will not affect the commits but only the branch label will no longer exist.

I added this line to test the merging operation.
I added this line to test the merging operation for the 2nd time.  